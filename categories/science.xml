<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>I Love Symposia! (Posts about science)</title><link>https://jni.github.io/ilovesymposia.com/</link><description></description><atom:link href="https://jni.github.io/ilovesymposia.com/categories/science.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:jni.soma@fastmail.com"&gt;Juan Nunez-Iglesias&lt;/a&gt; </copyright><lastBuildDate>Thu, 14 Mar 2019 06:22:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Summer school announcement: 2nd Advanced Scientific Programming in Python (ASPP) Asia Pacific!</title><link>https://jni.github.io/ilovesymposia.com/posts/2018/08/30/summer-school-announcement-2nd-advanced-scientific-programming-in-python-aspp-asia-pacific/</link><dc:creator>Juan Nunez-Iglesias</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The Advanced Scientific Programming in Python (ASPP) summer school has had &lt;a href="https://scipy-school.org/archives"&gt;10 successful iterations&lt;/a&gt; in Europe and &lt;a href="https://python.g-node.org/aspp-asia-pacific-2018/"&gt;one iteration here in Melbourne&lt;/a&gt; earlier this year. Another European iteration is starting next week in Camerino, Italy.&lt;/p&gt;
&lt;p&gt;Now, thanks to the generous sponsorship of &lt;a href="https://www.csiro.au"&gt;CSIRO&lt;/a&gt;, and the efforts of &lt;a href="http://biology.anu.edu.au/people/benjamin-schwessinger"&gt;Benjamin Schwessinger&lt;/a&gt; and &lt;a href="https://twitter.com/DataNerdery"&gt;Genevieve Buckley&lt;/a&gt;, two alumni from the Melbourne school, and &lt;a href="https://people.csiro.au/M/K/Kerensa-Mcelroy"&gt;Kerensa McElroy&lt;/a&gt;, Agriculture Data School Coordinator at CSIRO, the Asia Pacific fork of ASPP gets its second iteration in &lt;strong&gt;Canberra&lt;/strong&gt;, &lt;strong&gt;Jan 20-27, 2019&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;Key details&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The workshop runs &lt;strong&gt;January 20-27, 2019&lt;/strong&gt; at the &lt;strong&gt;Australian National University&lt;/strong&gt; in Canberra, Australia.&lt;/li&gt;
&lt;li&gt;topics include git, contributing to open source software with github, testing, debugging, profiling, advanced NumPy, Cython, and data visualisation.&lt;/li&gt;
&lt;li&gt;hands-on learning using pair programming&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;free to attend&lt;/strong&gt; (but students are responsible for travel, accommodation, and meals)&lt;/li&gt;
&lt;li&gt;30 student places, to be selected competitively&lt;/li&gt;
&lt;li&gt;application deadline is &lt;strong&gt;Oct 7, 2018&lt;/strong&gt;, 23:59 &lt;a href="https://www.timeanddate.com/time/zones/aoe"&gt;Anywhere On Earth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;website: https://scipy-school.org&lt;/li&gt;
&lt;li&gt;FAQ: https://scipy-school.org/faq&lt;/li&gt;
&lt;li&gt;apply: https://scipy-school.org/applications&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Background&lt;/h3&gt;

&lt;p&gt;Three years ago, I had the privilege of teaching the 2015 ASPP school in Munich. It turned out to be a fantastic teaching experience (I have taught in 2 more since), and more importantly, it was a fantastic experience for the students. Students are selected for the school to fit a certain profile, neither too novice nor too advanced. As such, participants selected for the school are almost guaranteed to learn a great deal.&lt;/p&gt;
&lt;p&gt;Indeed, almost every iteration of the school has been co-organised by former students. Sure enough, with the help of two students from the Melbourne instance, we will be able to have a new iteration in Canberra this January.&lt;/p&gt;
&lt;h3&gt;Course description&lt;/h3&gt;

&lt;p&gt;Scientists spend increasingly more time writing, maintaining, and debugging software. While techniques for doing this efficiently have evolved, only few scientists have been trained to use them. As a result, instead of doing their research, they spend far too much time writing deficient code and reinventing the wheel. In this course we will present a selection of advanced programming techniques and best practices that are standard in industry, but especially tailored to the needs of a programming scientist. Lectures are devised to be interactive and to give the students enough time to acquire direct hands-on experience with the materials. Students will work in pairs throughout the school and will team up to practice the newly learned skills in a real programming project — an entertaining computer game.&lt;/p&gt;
&lt;p&gt;We use the Python programming language for the entire course. Python works as a simple programming language for beginners, but more importantly, it also works great in scientific simulations and data analysis. We show how clean language design, ease of extensibility, and the great wealth of open source libraries for scientific computing and data visualization are driving Python to becoming a standard tool for scientists.&lt;/p&gt;
&lt;h3&gt;Who is eligible?&lt;/h3&gt;

&lt;p&gt;This school is targeted at Master/PhD students, postdocs, and academic staff and technicians from all areas of science. Competence in Python or in another language such as Java, C/C++, MATLAB, or Mathematica is absolutely required. Basic knowledge of Python and of a version control system such as git, subversion, mercurial, or bazaar is assumed. Participants without any prior experience with Python and/or git should work through the proposed introductory material before the course.&lt;/p&gt;
&lt;p&gt;We have strived to get a pool of students that is international and gender-balanced, and have succeeded, with gender parity in the last five schools.&lt;/p&gt;
&lt;h3&gt;More questions&lt;/h3&gt;

&lt;p&gt;If you have any questions, contact &lt;a href="mailto:info@scipy-school.org"&gt;info@scipy-school.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please circulate this announcement widely! And follow &lt;a href="https://twitter.com/scipyschool"&gt;@scipyschool&lt;/a&gt; for further developments.&lt;/p&gt;
&lt;p&gt;Juan.&lt;/p&gt;&lt;/div&gt;</description><category>conference</category><category>open-source</category><category>Planet SciPy</category><category>programming</category><category>Python</category><category>science</category><guid>https://jni.github.io/ilovesymposia.com/posts/2018/08/30/summer-school-announcement-2nd-advanced-scientific-programming-in-python-aspp-asia-pacific/</guid><pubDate>Thu, 30 Aug 2018 14:48:05 GMT</pubDate></item><item><title>What do scientists know about open source?</title><link>https://jni.github.io/ilovesymposia.com/posts/2018/06/20/what-do-scientists-know-about-open-source/</link><dc:creator>Juan Nunez-Iglesias</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;A friend recently pointed out this great talk by Matt Bernius, &lt;a href="https://community.redhat.com/blog/2018/05/what-college-students-know/"&gt;What students know and don't know about open source&lt;/a&gt;. If you have even a minor interest in open source it's worth a watch, but the gist is: in the US alone, there are about 200,000 students enrolled in a computer science major. Open source communities are a great space to learn real-world programming, so why don't these numbers translate into massive contributions to open source?&lt;/p&gt;
&lt;p&gt;At the core of the issue, Matt identifies two main problems: (1) colleges and universities simply don't teach open source, or even collaborative coding; and (2), many open source communities make newcomers feel unwelcome in a variety of ways.&lt;/p&gt;
&lt;p&gt;I want to comment about this in the context of programming in science. That is, programming where the code is not the main product, but rather a useful tool to obtain a scientific result, for example in biology or physics. Here, we still see relatively little contribution to open source, for related but different cultural issues.&lt;/p&gt;
&lt;p&gt;I've sent my &lt;a href="https://ilovesymposia.com/2015/12/26/why-scientists-should-code-in-the-open/"&gt;scientists should code in the open&lt;/a&gt; post to a few people and the response from most remains sceptical. I hope this post will address some of their concerns.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3&gt;Scientific culture is ridiculously secretive&lt;/h3&gt;
&lt;p&gt;The most common objection is to my assertion that people won't scoop you by looking at your code. I remember a tweet (that I sadly can't find now) that really got to the gist of the problem. It went something like this:&lt;/p&gt;
&lt;blockquote&gt;
  Someone in science having a new idea: "Ooh, I hope I don't get scooped!"&lt;br&gt;
  Someone in open source having a new idea: "Ooh, I hope someone has implemented this already!"
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; I found the source! It's &lt;a href="https://twitter.com/tweetotaler/status/884412302098915329"&gt;this tweet&lt;/a&gt; by Elizabeth Seiver.&lt;/p&gt;
&lt;p&gt;This is a huge gap in culture that won't soon go away, but there are encouraging steps towards narrowing it. For example, PLOS Biology, a leading journal, recently &lt;a href="http://twitter.com/PLOSBiology/status/958346565868978176"&gt;announced&lt;/a&gt; that they would consider "scooped" studies for publication within six months of the "scooping". That goes some way towards re-aligning incentives towards collaborative and open science.
olga botvinic
I've come across many collaborations that have started because of open source. I have not heard of someone getting scooped because of open source, but of course that sort of information would be hard to trace and come by. Several people did write to me that they were concerned about very specific groups rifling through their code expressly for the purpose of scooping them. For me it's hard to imagine someone even having that attitude, and my advice is that if you do face such a toxic community, it might be wise to change your chosen field of study.&lt;/p&gt;
&lt;p&gt;Nevertheless, I want to emphasise here that open source programming can take many forms, with the zip file attached to the paper being the lowest, coding in the open being the highest, and several other models in between. Any steps you can take towards the higher models will ultimately help you. My preferred mode for code that really does have to be private is to use a private GitHub repository, and &lt;em&gt;just make that repo public once the paper is accepted.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A lot of people prefer the "code dump with no revision history" model of post-publication sharing, but this tosses out a lot of valuable information for people coming after you: what have you tried that didn't work? What issues did you have with the code? Have you considered coding in one style or another? The code dump model also makes you less likely to use GitHub in the first place, depriving you of an opportunity to learn some valuable real-world skills.&lt;/p&gt;
&lt;h3&gt;For coding, scientists have even more severe impostor syndrome&lt;/h3&gt;

&lt;p&gt;As I mentioned in my original post, and this I find completely uncontestable, &lt;em&gt;publishing shitty code is not a bad thing.&lt;/em&gt; &lt;em&gt;Everybody writes bad code,&lt;/em&gt; and nearly everybody knows it. Here's Hadley Wickham, creator of &lt;a href="https://dplyr.tidyverse.org"&gt;dplyr&lt;/a&gt;, &lt;a href="https://tidyr.tidyverse.org"&gt;tidy data&lt;/a&gt;, &lt;a href="https://ggplot2.tidyverse.org"&gt;ggplot2&lt;/a&gt;, among other things; in other words, someone who knows a thing or two about elegant code and about as close as one gets to coding royalty in science:&lt;/p&gt;
&lt;blockquote&gt;
  The only way to write great code is to write lots of shitty code first.
&lt;/blockquote&gt;

&lt;p&gt;Publishing your raw code is a good thing and will absolutely not be a black mark on your career. Indeed, in open source circles, it is often a bare GitHub contribution history that is a black mark. (And this is another problem, but in my opinion a better one.)&lt;/p&gt;
&lt;h3&gt;Scientists don't know about open source&lt;/h3&gt;

&lt;p&gt;If knowledge of open source is lacking in computer science, what chance does it have in other fields? The truth is that outreach and education need to become a massive part of open source culture, &lt;em&gt;especially&lt;/em&gt; in science.&lt;/p&gt;
&lt;p&gt;I credit &lt;a href="https://bids.berkeley.edu/people/st%C3%A9fan-van-der-walt"&gt;Stéfan van der Walt&lt;/a&gt; for my life in open source. After I gave a talk at SciPy 2012, he invited me to join the scikit-image sprint at the end of the conference. If it hadn't been for that, I probably would have just wandered around the hall, too shy to join any sprint (see "impostor syndrome", above), and my life would be very different right now.&lt;/p&gt;
&lt;p&gt;Anyway, at that point I'd made my code "open source", which meant it was on GitHub. I had only added a license to submit to the conference. As a reminder, unlicensed code &lt;a href="http://www.astrobetter.com/blog/2014/03/10/the-whys-and-hows-of-licensing-scientific-code/"&gt;doesn't count as open source&lt;/a&gt;. But I had never really collaborated in open source. My idea of collaboration was my workflow with my colleague: a single branch (master), from which we both pulled and to which we both pushed. When I sat down with Stéfan and &lt;a href="http://tonysyu.github.io"&gt;Tony Yu&lt;/a&gt;, and I figured what I wanted to work on, I asked: "So, should I just push to master, or what?" I still remember, with some embarrassment, the dubious look Stéfan and Tony exchanged, as they silently figured out which of them would introduce this newbie to &lt;a href="https://help.github.com/articles/creating-a-pull-request/"&gt;pull requests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But that's the thing: I shouldn't feel embarrassment. Scientists for the most part don't get introduced to coding in their education, much less to open source.&lt;/p&gt;
&lt;h3&gt;What can scientists in open source do?&lt;/h3&gt;

&lt;p&gt;A lesson from my continued contributions to the SciPy ecosystem, I hope, is that some light mentorship can yield enormous dividends later on. Stéfan and Tony took the time to walk me through the open source contribution process, when they could have dismissively sent me a link to some page explaining it. I'm a big fan of writing good documents for newcomers, but nothing beats a good hand-holding. It's very easy for me to imagine an alternate reality where I had not felt welcome or rewarded by the scikit-image project and my life had not taken this productive turn.&lt;/p&gt;
&lt;p&gt;Continuing on imaginary themes, it is only slightly less plausible that the open source scientific world should be awash with new contributors at every level of science. How do we turn this dream into a reality?&lt;/p&gt;
&lt;p&gt;If you are a scientist and this post is among your first encounters with the term "open source", and you think you might be interested in learning more, here are a few things I recommend, in order of easiest to hardest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read the &lt;a href="https://github.com/elegant-scipy/elegant-scipy/blob/master/markdown/preface.markdown"&gt;preface&lt;/a&gt; and &lt;a href="https://github.com/elegant-scipy/elegant-scipy/blob/master/markdown/epilogue.markdown"&gt;epilogue&lt;/a&gt; of my book with Stéfan and &lt;a href="http://harrietdashnow.com"&gt;Harriet Dashnow&lt;/a&gt;. (Free online!) I feel a bit icky recommending my own book, but why repeat myself? In those chapters I tried to distill my thoughts on joining the SciPy community, which is a fantastic, rewarding space in which to do open source programming as a scientist. I expect many things we wrote generalise well to e.g. &lt;a href="https://www.tidyverse.org"&gt;the tidyverse&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Look for upcoming &lt;a href="https://software-carpentry.org"&gt;software carpentry&lt;/a&gt; workshops near you. These are free two-day programming boot camps to introduce you to computational thinking, and, crucially, to version control with git.&lt;/li&gt;
&lt;li&gt;Go to a &lt;a href="https://conference.scipy.org"&gt;SciPy conference&lt;/a&gt;. I know of SciPy, EuroSciPy, and SciPy India, but I have a vague memory of offshoots in Africa and South America.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are in a boat similar to mine (intermediate/advanced open source contributor in science), and you feel like you would like your work to feel a bit more crowded, I can tell you what I'm going to be doing in response to this talk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sign up to deliver (more) software carpentry training (or similar). Getting the word out is the number one thing.&lt;/li&gt;
&lt;li&gt;In software carpentry, emphasise the role of git in collaboration. (I think the official program does not go far enough in this direction, and focuses instead on the initial linear history.)&lt;/li&gt;
&lt;li&gt;If you are located in a university, talk to your CS department to see whether they have any courses in open source development. If not, see whether you can guest lecture in a suitable course to make students aware of the open source opportunities out there.&lt;/li&gt;
&lt;li&gt;Similarly, follow up software carpentry with more advanced sessions on open source collaboration. I gained an enormous fraction of my programming skills from collaborating on open source. I really think there is no better tool for long-term learning in this space. An idea that I'd like to try out is to curate a bunch of open issues on prominent repos and get SWC students to sprint on them for a day&lt;sup id="fnref-1111-1"&gt;&lt;a href="https://jni.github.io/ilovesymposia.com/posts/2018/06/20/what-do-scientists-know-about-open-source/#fn-1111-1" class="jetpack-footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;. I know about the "good first issue" tag on GitHub. Unfortunately, my experience with it is mixed. I think many repos are overly optimistic with theirs (this includes scikit-image), and, furthermore, a large proportion of these tagged issues get "claimed" quickly — and often half-heartedly!&lt;/li&gt;
&lt;li&gt;Write, write, write! Did you get a cool PR merged? Write a blog post about it! Or at least tweet! We need to get the message out that writing PRs is for everyone. =)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any further ideas, I'd love to hear them.&lt;/p&gt;
&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn-1111-1"&gt;
Actually I drafted this post a while back, and tried this yesterday, with mixed success. I'll write about that experience soon. ;) &lt;a href="https://jni.github.io/ilovesymposia.com/posts/2018/06/20/what-do-scientists-know-about-open-source/#fnref-1111-1"&gt;↩&lt;/a&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><category>open-source</category><category>Planet SciPy</category><category>programming</category><category>science</category><guid>https://jni.github.io/ilovesymposia.com/posts/2018/06/20/what-do-scientists-know-about-open-source/</guid><pubDate>Wed, 20 Jun 2018 21:19:46 GMT</pubDate></item><item><title>1st ASPP Asia Pacific evaluation survey</title><link>https://jni.github.io/ilovesymposia.com/posts/2018/04/09/1st-aspp-asia-pacific-evaluation-survey/</link><dc:creator>Juan Nunez-Iglesias</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;In January of 2018, we had the first &lt;a href="http://python.g-node.org"&gt;ASPP summer school&lt;/a&gt; outside of Europe. (This was a parallel workshop to the European one, which will be held in Italy in September 2018.) In general, it was a great success, with some caveats that we will elaborate on below.&lt;/p&gt;
&lt;p&gt;First we want to note that this school was a bit different than the European ones, in that we only had attendees from Australian institutions, where the European school has broad international representation, including some from out of Europe. This was in some ways inevitable, as it is more expensive to travel to Australia from almost anywhere than to travel within Europe. On the other hand, we advertised relatively late, and we were unable to secure travel grants during the advertising period, so there is hope that a future edition would be able to attract a more international crowd from the Asia Pacific region.&lt;/p&gt;
&lt;p&gt;Given all this, there was a question as to whether we would be able to capture the atmosphere of the school, which normally sees the students living together and socialising for basically the whole week. In this case, most students just went home after classes were finished. But although some of that atmosphere was missing, by the end of the week we did manage to get some close links between all the students and the faculty. The evaluations below show that most of the value of the school was preserved.&lt;/p&gt;
&lt;p&gt;We note that 100% of the respondents (29/30 of the students) would recommend the course to their peers. So, although some lectures were better received than others, and although the programming project was not universally loved, we managed to provide value for everyone. All of this is in line with the evaluations at previous schools (available at https://python.g-node.org/wiki/archives.html).&lt;/p&gt;
&lt;p&gt;The project, which consists of programming a videogame bot, is controversial every year, but, consistently, more people like it than don't, and people get to practice git, pair programming, and programming as a team, which is the single most difficult skill to practice when programming for science. Indeed when we walk around during the project programming sessions, we see people extremely engaged in what they are coding. It's difficult to imagine a scientific problem engaging such diverse people as the school's attendees (which come from very disparate scientific fields).&lt;/p&gt;
&lt;p&gt;Of all the feedback, two particular statements, we hope from people in the same project group, broke our hearts. We decided not to include them in this report, because they might be easy to de-anonymise by group members, but they boil down to the following: a group member, by being combative and rude to others in their team, and deciding to essentially complete the project by themselves, ruined the programming project for all of their team members, with some even feeling that they were not good enough to contribute. This is tragic, because we want everyone in the school to feel &lt;em&gt;empowered&lt;/em&gt; to do anything at all in Python.&lt;/p&gt;
&lt;p&gt;Absolutely every student has something to offer in this project. Here, as in life, teams are comprised of members of varying skills. But we know from our selection that everyone has the skills to contribute (and this is confirmed by the fact that most attendees, for most lectures, felt that the difficulty level was "just right"). So if a student felt inadequate, it can only be because of the toxic team member.&lt;/p&gt;
&lt;p&gt;Ned Batchelder recently wrote an excellent &lt;a href="https://nedbatchelder.com/blog/201711/toxic_experts.html"&gt;blog post&lt;/a&gt; about what he calls "Toxic experts" and what Tiziano Zito calls, somewhat more bluntly, "Arrogant assholes". (In discussions about this post, Tiziano and others noted that one does not have to be an expert to be toxic, or arrogant, or an asshole. No matter: the points below apply equally to anyone meeting any of the above characteristics &lt;em&gt;regardless&lt;/em&gt; of expertise.)&lt;/p&gt;
&lt;p&gt;The feedback we received should serve as a warning to selection committees and hiring managers everywhere about how damaging it is to allow such a person into your ranks. Due to the anonymous nature of the survey, we can't tell whether there was one or two toxic experts in our midst, but if it's one, they soured the school for five other people. If it's two, then that's ten people, a third of the school, that might have had a terrible experience. The problem with toxic experts is that they can so quickly cause damage to so many others. Thus, even if they are a mythical "10x engineer", &lt;strong&gt;they are not worth it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Literally nothing that the above-described team member could have done, coding-wise, could make up for the damage they caused. Despite their strong opinions, they missed the entire point of the programming project, which is not to win a medal, but to &lt;em&gt;learn about working in a team.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We try to avoid toxic experts in our selection process for the school, but they slip through every so often. In response to this feedback, we will aim to be even more vigilant in our selection, and also make the aims of the project &lt;em&gt;as a learning exercise&lt;/em&gt; more explicit during its introduction. We will also make sure to be more aware of group interactions during the actual school; we apologise to the students involved that we did not catch this behaviour this time. We are truly sorry.&lt;/p&gt;
&lt;p&gt;If you are in the position of being an expert during a school or workshop, don't go it alone. That is a waste of your time, because you can do a programming project on your own whenever you damn well please. Slow down, and think instead about practicing your teaching and mentoring skills. They are also important in life, and, in many contexts, they are your responsibility.&lt;/p&gt;
&lt;p&gt;You can access the full survey results &lt;a href="https://python.g-node.org/wiki/_media/evaluation_survey_2018_melbourne.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;-- Juan, and the Organisers.&lt;/p&gt;&lt;/div&gt;</description><category>conference</category><category>programming</category><category>Python</category><category>science</category><guid>https://jni.github.io/ilovesymposia.com/posts/2018/04/09/1st-aspp-asia-pacific-evaluation-survey/</guid><pubDate>Mon, 09 Apr 2018 13:29:53 GMT</pubDate></item><item><title>SciPy's new LowLevelCallable is a game-changer</title><link>https://jni.github.io/ilovesymposia.com/posts/2017/03/12/scipys-new-lowlevelcallable-is-a-game-changer/</link><dc:creator>Juan Nunez-Iglesias</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;... and combines rather well with that other game-changing library I like, &lt;a href="https://ilovesymposia.com/2016/12/20/numba-in-the-real-world/"&gt;Numba&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've &lt;a href="https://ilovesymposia.com/2015/12/10/the-cost-of-a-python-function-call/"&gt;lamented before&lt;/a&gt; that function calls are expensive in Python, and that this severely hampers many functions that &lt;em&gt;should&lt;/em&gt; be insanely useful, such as SciPy's &lt;a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.generic_filter.html#scipy.ndimage.generic_filter"&gt;&lt;code&gt;ndimage.generic_filter&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To illustrate this, let's look at image &lt;em&gt;erosion&lt;/em&gt;, which is the replacement of each pixel in an image by the minimum of its neighbourhood. &lt;code&gt;ndimage&lt;/code&gt; has a fast C implementation, which serves as a perfect benchmark against the generic version, using a generic filter with &lt;code&gt;min&lt;/code&gt; as the operator. Let's start with a 2048 x 2048 random image:&lt;/p&gt;
&lt;p&gt;```http://cython.readthedocs.io/en/latest/src/userguide/language_basics.html#types&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; %timeit ndi.generic_filter(image, LowLevelCallable(nbmin.ctypes), footprint=footprint)
10 loops, best of 3: 113 ms per loop&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;That's right: it's even marginally &lt;em&gt;faster&lt;/em&gt; than the pure C version! I almost cried when I ran that.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;hr&gt;
&lt;p&gt;Higher-order functions, ie functions that take other functions as input, enable powerful, concise, elegant &lt;a href="https://ilovesymposia.com/2014/06/24/a-clever-use-of-scipys-ndimage-generic_filter-for-n-dimensional-image-processing/"&gt;expressions&lt;/a&gt; of various algorithms. Unfortunately, these have been hampered in Python for large-scale data processing because of Python's function call overhead. SciPy's latest update goes a long way towards redressing this.&lt;/p&gt;&lt;/div&gt;</description><category>Numba</category><category>open-source</category><category>Planet SciPy</category><category>programming</category><category>Python</category><category>science</category><category>SciPy</category><guid>https://jni.github.io/ilovesymposia.com/posts/2017/03/12/scipys-new-lowlevelcallable-is-a-game-changer/</guid><pubDate>Sun, 12 Mar 2017 14:41:41 GMT</pubDate></item><item><title>Brian Greene on the Colbert Report</title><link>https://jni.github.io/ilovesymposia.com/posts/2008/05/29/brian-greene-on-the-colbert-report/</link><dc:creator>Juan Nunez-Iglesias</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I promise sometime soon I'll write something &lt;em&gt;not&lt;/em&gt; about someone else's videos! But for now, enjoy theoretical physicist &lt;a href="http://www.comedycentral.com/colbertreport/videos.jhtml?videoId=167386"&gt;Brian Greene on the Colbert Report&lt;/a&gt;. Stephen drives an excellent interview, as usual, and proves &lt;a href="http://www.comedycentral.com/colbertreport/videos.jhtml?videoId=76296"&gt;yet again&lt;/a&gt; that he either knows a good deal of science, or he does his homework before talking about it. As a result, science coverage on the Colbert Report is invariably excellent. &lt;a href="http://ilovesymposia.wordpress.com/wp-admin/post.php?action=edit&amp;amp;post=4&amp;amp;message=4"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>brian greene</category><category>physics</category><category>science</category><category>stephen colbert</category><category>Video</category><guid>https://jni.github.io/ilovesymposia.com/posts/2008/05/29/brian-greene-on-the-colbert-report/</guid><pubDate>Thu, 29 May 2008 17:21:18 GMT</pubDate></item></channel></rss>